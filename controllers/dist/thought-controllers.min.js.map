{"version":3,"sources":["thought-controllers.js"],"names":["require","Thought","User","thoughtController","getAllThoughts","req","find","res","json","dbThoughtData","err","log","then","getThoughtById","_ref","params","findOne","_id","id","select","status","message","addThought","_ref2","body","console","findOneAndUpdate","userId","$addToSet","thoughts","thoughtData","new","dbUserData","updateThought","_ref3","thoughtId","runValidators","updatedThought","$set","_ref4","findOneAndDelete","deletedThought","$pull","removeThought","addReaction","_ref5","reactions","removeReaction","_ref6","reactionId","thought","module","exports"],"mappings":"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","file":"thought-controllers.min.js","sourcesContent":["const { Thought, User } = require('../models');\r\n\r\nconst thoughtController = {\r\n  // GET all thoughts\r\n  getAllThoughts(req, res) {\r\n    Thought.find({})\r\n      .then(dbThoughtData => res.json(dbThoughtData))\r\n      .catch(err => {\r\n        console.log(err);\r\n        res.status(500).json(err);\r\n      });\r\n  },\r\n\r\n  // GET one thought by id\r\n  getThoughtById({ params }, res) {\r\n    Thought.findOne({ _id: params.id })\r\n      .select('-__v')\r\n      .sort({ _id: -1 })\r\n      .then(dbThoughtData => {\r\n        if (!dbThoughtData) {\r\n          res.status(404).json({ message: 'No thought found with id.' });\r\n          return;\r\n        }\r\n        res.json(dbThoughtData)\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        res.status(400).json(err);\r\n      });\r\n  },\r\n\r\n  // CREATE thought\r\n  addThought({ body }, res) {\r\n    Thought.create(body)\r\n      .then((thoughtData) => {\r\n        return User.findOneAndUpdate(\r\n          // Use the current user to create the thought\r\n          { _id: body.userId },\r\n          { $addToSet: { thoughts: thoughtData._id } },\r\n          { new: true }\r\n        );\r\n      })\r\n      .then(dbUserData => {\r\n        if (!dbUserData) {\r\n          res.status(404).json({ message: 'No user found with this id.' });\r\n          return;\r\n        }\r\n        res.json(dbUserData)\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        res.status(400).json(err);\r\n      });\r\n  },\r\n\r\n  // UPDATE thought by id\r\n  updateThought({ params, body }, res) {\r\n    Thought.findOneAndUpdate(\r\n      { _id: params.thoughtId },\r\n      { $set: body },\r\n      { runValidators: true, new: true }\r\n    )\r\n      .then(updatedThought => {\r\n        if (!updatedThought) {\r\n          return res.status(404).json({ message: 'No thought with this id!' });\r\n        }\r\n        return res.json({ message: \"Success\" });\r\n      })\r\n      .catch(err => res.json(err));\r\n  },\r\n\r\n  // DELETE thought\r\n  removeThought({ params }, res) {\r\n    Thought.findOneAndDelete({ _id: params.thoughtId })\r\n      .then(deletedThought => {\r\n        if (!deletedThought) {\r\n          return res.status(404).json({ message: 'No thought with this id!' });\r\n        }\r\n        return User.findOneAndUpdate(\r\n          { thoughts: params.thoughtId },\r\n          { $pull: { thoughts: params.thoughtId } },\r\n          { new: true }\r\n        );\r\n      })\r\n      .then(dbUserData => {\r\n        if (!dbUserData) {\r\n          res.status(404).json({ message: 'No thought found with this id!' });\r\n          return;\r\n        }\r\n        res.json(dbUserData);\r\n      })\r\n      .catch(err => res.json(err));\r\n  },\r\n\r\n  // CREATE reactions\r\n  addReaction({ params, body }, res) {\r\n    Thought.findOneAndUpdate(\r\n      { _id: params.thoughtId },\r\n      { $push: { reactions: body } },\r\n      { new: true, runValidators: true }\r\n    )\r\n      .then(updatedThought => {\r\n        if (!updatedThought) {\r\n          res.status(404).json({ message: 'No reaction found with this id!' });\r\n          return;\r\n        }\r\n        res.json(updatedThought);\r\n      })\r\n      .catch(err => res.json(err));\r\n  },\r\n\r\n  // Delete a reaction\r\n  removeReaction({\r\n    params\r\n}, res) {\r\n    Thought.findOneAndUpdate({\r\n                _id: params.thoughtId\r\n            },\r\n            //allows to remove the reaction by id\r\n            {\r\n                $pull: {\r\n                    reactions: {\r\n                        reactionId: params.reactionId\r\n                    }\r\n                }\r\n            }, {\r\n                new: true\r\n            }\r\n        )\r\n        .then((thought) => {\r\n            if (!thought) {\r\n                res.status(404).json({\r\n                    message: 'No reaction found with this id.'\r\n                });\r\n                return;\r\n            }\r\n            res.json(thought)\r\n        })\r\n        .catch(err => res.json(err));\r\n},\r\n}\r\n\r\nmodule.exports = thoughtController;"]}