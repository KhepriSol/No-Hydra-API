{"version":3,"sources":["thought-controllers.js"],"names":["require","Thought","User","thoughtController","getAllThoughts","req","res","find","then","dbThoughtData","json","err","console","log","status","getThoughtById","params","findOne","_id","id","select","sort","message","addThought","body","create","thoughtData","findOneAndUpdate","userId","$addToSet","thoughts","dbUserData","updateThought","thoughtId","$set","runValidators","updatedThought","removeThought","findOneAndDelete","deletedThought","$pull","addReaction","$push","reactions","removeReaction","reactionId","thought","module","exports"],"mappings":"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","sourcesContent":["const { Thought, User } = require('../models');\r\n\r\nconst thoughtController = {\r\n  // GET all thoughts\r\n  getAllThoughts(req, res) {\r\n    Thought.find({})\r\n      .then(dbThoughtData => res.json(dbThoughtData))\r\n      .catch(err => {\r\n        console.log(err);\r\n        res.status(500).json(err);\r\n      });\r\n  },\r\n\r\n  // GET one thought by id\r\n  getThoughtById({ params }, res) {\r\n    Thought.findOne({ _id: params.id })\r\n      .select('-__v')\r\n      .sort({ _id: -1 })\r\n      .then(dbThoughtData => {\r\n        if (!dbThoughtData) {\r\n          res.status(404).json({ message: 'No thought found with id.' });\r\n          return;\r\n        }\r\n        res.json(dbThoughtData)\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        res.status(400).json(err);\r\n      });\r\n  },\r\n\r\n  // CREATE thought\r\n  addThought({ body }, res) {\r\n    Thought.create(body)\r\n      .then((thoughtData) => {\r\n        return User.findOneAndUpdate(\r\n          // Use the current user to create the thought\r\n          { _id: body.userId },\r\n          { $addToSet: { thoughts: thoughtData._id } },\r\n          { new: true }\r\n        );\r\n      })\r\n      .then(dbUserData => {\r\n        if (!dbUserData) {\r\n          res.status(404).json({ message: 'No user found with this id.' });\r\n          return;\r\n        }\r\n        res.json(dbUserData)\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        res.status(400).json(err);\r\n      });\r\n  },\r\n\r\n  // UPDATE thought by id\r\n  updateThought({ params, body }, res) {\r\n    Thought.findOneAndUpdate(\r\n      { _id: params.thoughtId },\r\n      { $set: body },\r\n      { runValidators: true, new: true }\r\n    )\r\n      .then(updatedThought => {\r\n        if (!updatedThought) {\r\n          return res.status(404).json({ message: 'No thought with this id!' });\r\n        }\r\n        return res.json({ message: \"Success\" });\r\n      })\r\n      .catch(err => res.json(err));\r\n  },\r\n\r\n  // DELETE thought\r\n  removeThought({ params }, res) {\r\n    Thought.findOneAndDelete({ _id: params.thoughtId })\r\n      .then(deletedThought => {\r\n        if (!deletedThought) {\r\n          return res.status(404).json({ message: 'No thought with this id!' });\r\n        }\r\n        return User.findOneAndUpdate(\r\n          { thoughts: params.thoughtId },\r\n          { $pull: { thoughts: params.thoughtId } },\r\n          { new: true }\r\n        );\r\n      })\r\n      .then(dbUserData => {\r\n        if (!dbUserData) {\r\n          res.status(404).json({ message: 'No thought found with this id!' });\r\n          return;\r\n        }\r\n        res.json(dbUserData);\r\n      })\r\n      .catch(err => res.json(err));\r\n  },\r\n\r\n  // CREATE reactions\r\n  addReaction({ params, body }, res) {\r\n    Thought.findOneAndUpdate(\r\n      { _id: params.thoughtId },\r\n      { $push: { reactions: body } },\r\n      { new: true, runValidators: true }\r\n    )\r\n      .then(updatedThought => {\r\n        if (!updatedThought) {\r\n          res.status(404).json({ message: 'No reaction found with this id!' });\r\n          return;\r\n        }\r\n        res.json(updatedThought);\r\n      })\r\n      .catch(err => res.json(err));\r\n  },\r\n\r\n  // Delete a reaction\r\n  removeReaction({\r\n    params\r\n}, res) {\r\n    Thought.findOneAndUpdate({\r\n                _id: params.thoughtId\r\n            },\r\n            //allows to remove the reaction by id\r\n            {\r\n                $pull: {\r\n                    reactions: {\r\n                        reactionId: params.reactionId\r\n                    }\r\n                }\r\n            }, {\r\n                new: true\r\n            }\r\n        )\r\n        .then((thought) => {\r\n            if (!thought) {\r\n                res.status(404).json({\r\n                    message: 'No reaction found with this id.'\r\n                });\r\n                return;\r\n            }\r\n            res.json(thought)\r\n        })\r\n        .catch(err => res.json(err));\r\n},\r\n}\r\n\r\nmodule.exports = thoughtController;"],"file":"thought-controllers.dev.js"}