{"version":3,"sources":["user.controller.js"],"names":["require","User","userController","getAllUsers","req","res","find","populate","path","select","sort","log","then","dbUserData","json","err","console","status","_ref","_id","params","sendStatus","body","updateUser","_ref2","findOneAndUpdate","id","_ref3","message","runValidators","deleteUser","_ref4","findOneAndDelete","updateMany","username","$in","friends","userId","Thought","deleteMany","friendId","_ref5","$push","removefromFriendList","thoghtId","deletedFriend","_ref6","$pull","new","module","exports"],"mappings":"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","file":"user.controller.min.js","sourcesContent":["const {\r\n    User\r\n} = require('../models');\r\n\r\nconst userController = {\r\n\r\n    //get all users\r\n    getAllUsers(req, res) {\r\n        User.find({})\r\n            .populate({\r\n                path: 'thoughts',\r\n                //allows to remove __v from visuals\r\n                select: ('-__v')\r\n            })\r\n            .populate({\r\n                path: 'friends',\r\n                select: ('-__v')\r\n            })\r\n            .select('-__v')\r\n            // sort by descending order by the _id value\r\n            .sort({\r\n                _id: -1\r\n            })\r\n            .then(dbUserData => res.json(dbUserData))\r\n            .catch(err => {\r\n                console.log(err);\r\n                res.status(500).json(err);\r\n            });\r\n    },\r\n\r\n    //get one user by id\r\n    getUserById({\r\n        params\r\n    }, res) {\r\n        User.findOne({\r\n                _id: params.id\r\n            })\r\n            .populate({\r\n                path: 'thoughts',\r\n                select: '-__v'\r\n            })\r\n            .select('-__v')\r\n            .then(dbUserData => res.json(dbUserData))\r\n            .catch(err => {\r\n                console.log(err);\r\n                res.sendStatus(400);\r\n            });\r\n    },\r\n\r\n    //create user\r\n    createUser({\r\n        body\r\n    }, res) {\r\n        User.create(body)\r\n            .then(dbUserData => res.json(dbUserData))\r\n            .catch(err => res.status(400).json(err));\r\n    },\r\n\r\n    //update user by id\r\n    updateUser({\r\n        params,\r\n        body\r\n    }, res) {\r\n        User.findOneAndUpdate({\r\n                _id: params.id\r\n            }, body, {\r\n                new: true,\r\n                runValidators: true\r\n            })\r\n            .then(dbUserData => {\r\n                if (!dbUserData) {\r\n                    res.status(404).json({\r\n                        message: 'No user found with this id.'\r\n                    });\r\n                    return;\r\n                }\r\n                res.json(dbUserData);\r\n            })\r\n            .catch(err => res.status(400).json(err));\r\n    },\r\n\r\n    //delete user\r\n    deleteUser({\r\n        params\r\n    }, res) {\r\n        User.findOneAndDelete({\r\n                _id: params.id\r\n            })\r\n            .then(dbUserData => {\r\n                if (!dbUserData) {\r\n                    res.status(404).json({\r\n                        message: 'No user found with this id.'\r\n                    });\r\n                    return;\r\n                }\r\n                return dbUserData;\r\n            })\r\n            .then(dbUserData => {\r\n                User.updateMany({\r\n                        _id: {\r\n                            $in: dbUserData.friends\r\n                        }\r\n                    }, {\r\n                        $pull: {\r\n                            friends: params.userId\r\n                        }\r\n                    })\r\n                    .then(() => {\r\n                        //deletes user's thought associated with id\r\n                        Thought.deleteMany({\r\n                                username: dbUserData.username\r\n                            })\r\n                            .then(() => {\r\n                                res.json({\r\n                                    message: 'User deleted successfully'\r\n                                });\r\n                            })\r\n                            .catch(err => {\r\n                                console.log(err);\r\n                                res.status(400).json(err);\r\n                            })\r\n                    })\r\n                    .catch(err => {\r\n                        console.log(err);\r\n                        res.status(400).json(err);\r\n                    })\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                res.status(400).json(err);\r\n            })\r\n    },\r\n\r\n    //add friends\r\n    addToFriendList({\r\n        params\r\n    }, res) {\r\n        User.findOneAndUpdate({\r\n                _id: params.userId\r\n            }, {\r\n                $push: {\r\n                    friends: params.friendId\r\n                }\r\n            }, {\r\n                new: true\r\n            })\r\n            .then(dbUserData => {\r\n                if (!dbUserData) {\r\n                    res.status(404).json({\r\n                        message: 'No user found!'\r\n                    });\r\n                    return;\r\n                }\r\n                res.json(dbUserData);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                res.json(err)\r\n            });\r\n    },\r\n\r\n    //delete friend\r\n    removefromFriendList({\r\n        params\r\n    }, res) {\r\n        User.findOneAndDelete({\r\n                _id: params.thoghtId\r\n            })\r\n            .then(deletedFriend => {\r\n                if (!deletedFriend) {\r\n                    return res.status(404).json({\r\n                        message: 'No friend found.'\r\n                    })\r\n                }\r\n                return User.findOneAndUpdate({\r\n                    friends: params.friendId\r\n                }, {\r\n                    $pull: {\r\n                        friends: params.friendId\r\n                    }\r\n                }, {\r\n                    new: true\r\n                });\r\n            })\r\n            .then(dbUserData => {\r\n                if (!dbUserData) {\r\n                    res.status(404).json({\r\n                        message: 'No friend found.'\r\n                    })\r\n                    return;\r\n                }\r\n                res.json(dbUserData);\r\n            })\r\n            .catch(err => res.json(err));\r\n    },\r\n};\r\n\r\nmodule.exports = userController;"]}