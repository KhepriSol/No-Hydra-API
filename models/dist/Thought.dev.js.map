{"version":3,"sources":["Thought.js"],"names":["require","Schema","model","moment","reactionSchema","ThoughtSchema","thoughtText","type","String","required","minlength","maxlength","createdAt","Date","now","get","createdAtVal","format","username","trim","reactions","toJSON","virtuals","getters","id","virtual","length","pre","next","thought","Reaction","deleteMany","thoughtId","_id","Thought","module","exports"],"mappings":";;eAA0BA,OAAO,CAAC,UAAD,C;IAAzBC,M,YAAAA,M;IAAQC,K,YAAAA,K;;AAChB,IAAMC,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMI,cAAc,GAAGJ,OAAO,CAAC,YAAD,CAA9B;;AAEA,IAAMK,aAAa,GAAG,IAAIJ,MAAJ,CACpB;AACEK,EAAAA,WAAW,EAAE;AACXC,IAAAA,IAAI,EAAEC,MADK;AAEXC,IAAAA,QAAQ,EAAE,IAFC;AAGXC,IAAAA,SAAS,EAAE,CAHA;AAIXC,IAAAA,SAAS,EAAE;AAJA,GADf;AAOEC,EAAAA,SAAS,EAAE;AACTL,IAAAA,IAAI,EAAEM,IADG;AAET,eAASA,IAAI,CAACC,GAFL;AAGTC,IAAAA,GAAG,EAAE,aAACC,YAAD;AAAA,aACHb,MAAM,CAACa,YAAD,CAAN,CAAqBC,MAArB,CAA4B,2BAA5B,CADG;AAAA;AAHI,GAPb;AAaEC,EAAAA,QAAQ,EAAE;AACRX,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE,IAFF;AAGRU,IAAAA,IAAI,EAAE;AAHE,GAbZ;AAkBE;AACAC,EAAAA,SAAS,EAAE,CAAChB,cAAD;AAnBb,CADoB,EAsBpB;AACEiB,EAAAA,MAAM,EAAE;AACNC,IAAAA,QAAQ,EAAE,IADJ;AAENC,IAAAA,OAAO,EAAE;AAFH,GADV;AAKEC,EAAAA,EAAE,EAAE;AALN,CAtBoB,CAAtB;AA+BAnB,aAAa,CAACoB,OAAd,CAAsB,eAAtB,EAAuCV,GAAvC,CAA2C,YAAY;AACrD,SAAO,KAAKK,SAAL,CAAeM,MAAtB;AACD,CAFD;AAIArB,aAAa,CAACsB,GAAd,CAAkB,kBAAlB,EAAsC,iBAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9BC,UAAAA,OAD8B,GACpB,IADoB,EAEpC;;AAFoC;AAAA,0CAG9BC,QAAQ,CAACC,UAAT,CAAoB;AAAEC,YAAAA,SAAS,EAAEH,OAAO,CAACI;AAArB,WAApB,CAH8B;;AAAA;AAIpCL,UAAAA,IAAI;;AAJgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtC;AAOA,IAAMM,OAAO,GAAGhC,KAAK,CAAC,SAAD,EAAYG,aAAZ,CAArB;AAEA8B,MAAM,CAACC,OAAP,GAAiBF,OAAjB","sourcesContent":["const { Schema, model } = require('mongoose');\r\nconst moment = require('moment');\r\nconst reactionSchema = require('./Reaction');\r\n\r\nconst ThoughtSchema = new Schema(\r\n  {\r\n    thoughtText: {\r\n      type: String,\r\n      required: true,\r\n      minlength: 1,\r\n      maxlength: 280,\r\n    },\r\n    createdAt: {\r\n      type: Date,\r\n      default: Date.now,\r\n      get: (createdAtVal) =>\r\n        moment(createdAtVal).format('MMM DD, YYYY [at] hh:mm a'),\r\n    },\r\n    username: {\r\n      type: String,\r\n      required: true,\r\n      trim: true,\r\n    },\r\n    // use reactionSchema to validate data for a reply\r\n    reactions: [reactionSchema],\r\n  },\r\n  {\r\n    toJSON: {\r\n      virtuals: true,\r\n      getters: true,\r\n    },\r\n    id: false,\r\n  }\r\n);\r\n\r\nThoughtSchema.virtual('reactionCount').get(function () {\r\n  return this.reactions.length;\r\n});\r\n\r\nThoughtSchema.pre('findOneAndDelete', async function (next) {\r\n  const thought = this;\r\n  // Remove all reactions on the thought being deleted\r\n  await Reaction.deleteMany({ thoughtId: thought._id });\r\n  next();\r\n});\r\n\r\nconst Thought = model('Thought', ThoughtSchema);\r\n\r\nmodule.exports = Thought;\r\n"],"file":"Thought.dev.js"}