"use strict";var _require=require("mongoose"),Schema=_require.Schema,model=_require.model,moment=require("moment"),UserSchema=new Schema({username:{type:String,unique:!0,required:!0,trim:!0,minlength:[3,"Username must be at least 3 characters long"],maxlength:[20,"Username must be at most 20 characters long"]},email:{type:String,required:[!0,"User email address required"],unique:!0,validate:{validator:function(e){return/^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/.test(e)},message:function(e){return"".concat(e.value," is not a valid email address!")}}},thoughts:[{type:Schema.Types.ObjectId,ref:"Thought"}],friends:[{type:Schema.Types.ObjectId,ref:"User"}]},{toJSON:{virtuals:!0,getters:!0},id:!1});UserSchema.virtual("friendCount").get(function(){return this.friends.length}),UserSchema.pre("findOneAndDelete",function(r){var t;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return t=this,e.next=3,regeneratorRuntime.awrap(Thought.deleteMany({username:t.username}));case 3:return e.next=5,regeneratorRuntime.awrap(User.updateMany({friends:t._id},{$pull:{friends:t._id}}));case 5:r();case 6:case"end":return e.stop()}},null,this)});var User=model("User",UserSchema);module.exports=User;
//# sourceMappingURL=User.min.js.map
