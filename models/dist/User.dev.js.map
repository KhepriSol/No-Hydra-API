{"version":3,"sources":["User.js"],"names":["require","Schema","model","moment","UserSchema","username","type","String","unique","required","trim","minlength","maxlength","email","validate","validator","v","test","message","props","value","thoughts","Types","ObjectId","ref","friends","toJSON","virtuals","getters","id","virtual","get","length","pre","next","user","Thought","deleteMany","User","updateMany","_id","$pull","module","exports"],"mappings":";;eAA0BA,OAAO,CAAC,UAAD,C;IAAzBC,M,YAAAA,M;IAAQC,K,YAAAA,K;;AAChB,IAAMC,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AAEA,IAAMI,UAAU,GAAG,IAAIH,MAAJ,CACjB;AACEI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,MAAM,EAAE,IAFA;AAGRC,IAAAA,QAAQ,EAAE,IAHF;AAIRC,IAAAA,IAAI,EAAE,IAJE;AAKRC,IAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,6CAAJ,CALH;AAMRC,IAAAA,SAAS,EAAE,CAAC,EAAD,EAAK,6CAAL;AANH,GADZ;AASEC,EAAAA,KAAK,EAAE;AACLP,IAAAA,IAAI,EAAEC,MADD;AAELE,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,6BAAP,CAFL;AAGLD,IAAAA,MAAM,EAAE,IAHH;AAILM,IAAAA,QAAQ,EAAE;AACRC,MAAAA,SAAS,EAAE,mBAAUC,CAAV,EAAa;AACtB,eAAO,sCAAsCC,IAAtC,CAA2CD,CAA3C,CAAP;AACD,OAHO;AAIRE,MAAAA,OAAO,EAAE,iBAACC,KAAD;AAAA,yBAAcA,KAAK,CAACC,KAApB;AAAA;AAJD;AAJL,GATT;AAoBEC,EAAAA,QAAQ,EAAE,CAAC;AAAEf,IAAAA,IAAI,EAAEL,MAAM,CAACqB,KAAP,CAAaC,QAArB;AAA+BC,IAAAA,GAAG,EAAE;AAApC,GAAD,CApBZ;AAqBEC,EAAAA,OAAO,EAAE,CAAC;AAAEnB,IAAAA,IAAI,EAAEL,MAAM,CAACqB,KAAP,CAAaC,QAArB;AAA+BC,IAAAA,GAAG,EAAE;AAApC,GAAD;AArBX,CADiB,EAwBjB;AACEE,EAAAA,MAAM,EAAE;AACNC,IAAAA,QAAQ,EAAE,IADJ;AAENC,IAAAA,OAAO,EAAE;AAFH,GADV;AAKEC,EAAAA,EAAE,EAAE;AALN,CAxBiB,CAAnB;AAiCAzB,UAAU,CAAC0B,OAAX,CAAmB,aAAnB,EAAkCC,GAAlC,CAAsC,YAAY;AAChD,SAAO,KAAKN,OAAL,CAAaO,MAApB;AACD,CAFD;AAIA5B,UAAU,CAAC6B,GAAX,CAAe,kBAAf,EAAmC,iBAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BC,UAAAA,IAD2B,GACpB,IADoB,EAEjC;;AAFiC;AAAA,0CAG3BC,OAAO,CAACC,UAAR,CAAmB;AAAEhC,YAAAA,QAAQ,EAAE8B,IAAI,CAAC9B;AAAjB,WAAnB,CAH2B;;AAAA;AAAA;AAAA,0CAK3BiC,IAAI,CAACC,UAAL,CACJ;AAAEd,YAAAA,OAAO,EAAEU,IAAI,CAACK;AAAhB,WADI,EAEJ;AAAEC,YAAAA,KAAK,EAAE;AAAEhB,cAAAA,OAAO,EAAEU,IAAI,CAACK;AAAhB;AAAT,WAFI,CAL2B;;AAAA;AASjCN,UAAAA,IAAI;;AAT6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnC;AAYA,IAAMI,IAAI,GAAGpC,KAAK,CAAC,MAAD,EAASE,UAAT,CAAlB;AAEAsC,MAAM,CAACC,OAAP,GAAiBL,IAAjB","sourcesContent":["const { Schema, model } = require('mongoose');\r\nconst moment = require('moment');\r\n\r\nconst UserSchema = new Schema(\r\n  {\r\n    username: {\r\n      type: String,\r\n      unique: true,\r\n      required: true,\r\n      trim: true,\r\n      minlength: [3, 'Username must be at least 3 characters long'],\r\n      maxlength: [20, 'Username must be at most 20 characters long'],\r\n    },\r\n    email: {\r\n      type: String,\r\n      required: [true, 'User email address required'],\r\n      unique: true,\r\n      validate: {\r\n        validator: function (v) {\r\n          return /^([\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4})?$/.test(v);\r\n        },\r\n        message: (props) => `${props.value} is not a valid email address!`,\r\n      },\r\n    },\r\n    thoughts: [{ type: Schema.Types.ObjectId, ref: 'Thought' }],\r\n    friends: [{ type: Schema.Types.ObjectId, ref: 'User' }],\r\n  },\r\n  {\r\n    toJSON: {\r\n      virtuals: true,\r\n      getters: true,\r\n    },\r\n    id: false,\r\n  }\r\n);\r\n\r\nUserSchema.virtual('friendCount').get(function () {\r\n  return this.friends.length;\r\n});\r\n\r\nUserSchema.pre('findOneAndDelete', async function (next) {\r\n  const user = this;\r\n  // Remove all the user's thoughts\r\n  await Thought.deleteMany({ username: user.username });\r\n  // Remove the user from all the friends' friends list\r\n  await User.updateMany(\r\n    { friends: user._id },\r\n    { $pull: { friends: user._id } }\r\n  );\r\n  next();\r\n});\r\n\r\nconst User = model('User', UserSchema);\r\n\r\nmodule.exports = User;\r\n"],"file":"User.dev.js"}