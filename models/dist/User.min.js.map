{"version":3,"sources":["User.js"],"names":["require","Schema","model","moment","username","String","unique","UserSchema","type","trim","minlength","maxlength","email","validator","v","required","test","validate","props","concat","value","thoughts","Types","ObjectId","ref","message","toJSON","virtuals","virtual","get","this","friends","length","next","user","regeneratorRuntime","async","_context","prev","getters","awrap","Thought","deleteMany","$pull","_id","stop","User"],"mappings":"0BAA0BA,QAAQ,YAA1BC,gBAAAA,OAAQC,eAAAA,MACVC,OAASH,QAAQ,UADfC,WAGW,IAHXA,OAIN,CACEG,SAAU,CAJRD,KAAME,OAMNC,QAAQ,EAJRC,UAAU,EAEZH,MAAU,EACRI,UADQ,CAAA,EAAA,+CAERF,UAFQ,CAAA,GAAA,gDAIRG,MAAM,CACNC,KAAAA,OACAC,SAAY,EAAA,EAAI,+BAPpBL,QAAA,EASEM,SAAO,CACDC,UADC,SAAAC,GAELC,MAAW,sCAFNC,KAAAF,IAILG,QAAU,SAAAC,GAAA,MAAA,GAAAC,OAAAD,EAAAE,MAAA,qCAGPC,SAHO,CAAA,CAAAb,KAAAP,OAAAqB,MAAAC,SAAAC,IAAA,YAIRC,QAAO,CAAA,CAAEjB,KAAAP,OAAAqB,MAACJ,SAADM,IAAA,UAAA,CAJDE,OAAA,CAbdC,UAAA,EAoBEN,SAAW,GAA+BG,IAAG,IACJA,WAAKI,QAAA,eAAAC,IAAA,WAApC,OAADC,KAAAC,QAAAC,SAIPL,WAAAA,IAAU,mBADJ,SAAAM,GAAA,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAJ,MAAA,KAAA,EAAA,OAENM,EAAST,KAFHO,EAAAJ,KAAA,EAAAE,mBAAAK,MAIJC,QAAAC,WAAA,CAAAtC,SAAA8B,EAAA9B,YAJI,KAAA,EAAA,OAAAiC,EAAAJ,KAAA,EAAAE,mBAAAK,MAQZjC,KAAWqB,WACT,CAAAG,QAAYA,EAAAA,KADd,CAAAY,MAAA,CAAAZ,QAAAG,EAAAU,QARY,KAAA,EAYuBX,IAZvB,KAAA,EAAA,IAAA,MAAA,OAAAI,EAAAQ,SAAA,KAAAf,QAYuB,IAAAgB,KAAA5C,MAAA,OAAAK,YAC3B2B,OAAAA,QAAOY","file":"User.min.js","sourcesContent":["const { Schema, model } = require('mongoose');\r\nconst moment = require('moment');\r\n\r\nconst UserSchema = new Schema(\r\n  {\r\n    username: {\r\n      type: String,\r\n      unique: true,\r\n      required: true,\r\n      trim: true,\r\n      minlength: [3, 'Username must be at least 3 characters long'],\r\n      maxlength: [20, 'Username must be at most 20 characters long'],\r\n    },\r\n    email: {\r\n      type: String,\r\n      required: [true, 'User email address required'],\r\n      unique: true,\r\n      validate: {\r\n        validator: function (v) {\r\n          return /^([\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4})?$/.test(v);\r\n        },\r\n        message: (props) => `${props.value} is not a valid email address!`,\r\n      },\r\n    },\r\n    thoughts: [{ type: Schema.Types.ObjectId, ref: 'Thought' }],\r\n    friends: [{ type: Schema.Types.ObjectId, ref: 'User' }],\r\n  },\r\n  {\r\n    toJSON: {\r\n      virtuals: true,\r\n      getters: true,\r\n    },\r\n    id: false,\r\n  }\r\n);\r\n\r\nUserSchema.virtual('friendCount').get(function () {\r\n  return this.friends.length;\r\n});\r\n\r\nUserSchema.pre('findOneAndDelete', async function (next) {\r\n  const user = this;\r\n  // Remove all the user's thoughts\r\n  await Thought.deleteMany({ username: user.username });\r\n  // Remove the user from all the friends' friends list\r\n  await User.updateMany(\r\n    { friends: user._id },\r\n    { $pull: { friends: user._id } }\r\n  );\r\n  next();\r\n});\r\n\r\nconst User = model('User', UserSchema);\r\n\r\nmodule.exports = User;\r\n"]}