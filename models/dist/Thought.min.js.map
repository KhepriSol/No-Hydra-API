{"version":3,"sources":["Thought.js"],"names":["require","Schema","model","moment","reactionSchema","type","String","minlength","ThoughtSchema","required","Date","now","maxlength","createdAtVal","format","get","trim","username","virtuals","getters","id","virtual","this","reactions","length","next","thought","regeneratorRuntime","async","_context","prev","awrap","Reaction","deleteMany","thoughtId","_id","stop","Thought","module","exports"],"mappings":"0BAA0BA,QAAQ,YAA1BC,gBAAAA,OAAQC,eAAAA,MACVC,OAASH,QAAQ,UACjBI,eAF4BJ,QAAA,cAAlBE,cAAAA,IAIUD,OACxB,CAJIE,YAASH,CAMTK,KAAMC,OALNF,UAAAA,EAOAG,UAAW,EALXC,UAAa,KAGbH,UAAMC,CACNG,KAAQC,KACRH,QAAWG,KAHAC,IAIXC,IAAAA,SAAAA,GAAAA,OALJT,OAAAU,GAAAC,OAAA,+BAQIT,SADS,CAETA,KAAAC,OACAS,UAAK,EAAAC,MAAA,GAGPC,UAAU,CAAAb,iBAERK,CACAO,OAAM,CAhBVE,UAAA,EAkBEC,SAAA,GAGFC,IAAA,IACUZ,cADVa,QAAA,iBAAAN,IAAA,WAKEK,OAAIE,KAAAC,UAAAC,SAKNhB,cAAYe,IAAAA,mBAAZ,SAAAE,GAAA,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAJ,MAAA,KAAA,EAAA,OADFC,EAAAJ,KACEO,EAAAJ,KAAA,EAAAE,mBAAAI,MAGoCC,SAAAC,WAAA,CAAAC,UAAAR,EAAAS,OAHpC,KAAA,EAGoCV,IAHpC,KAAA,EAAA,IAAA,MAAA,OAAAI,EAAAO,SAAA,KAAAd,QAGoC,IAAAe,QAAAnC,MAAA,UAAAM,eAStC8B,OAAOC,QAAUF","file":"Thought.min.js","sourcesContent":["const { Schema, model } = require('mongoose');\r\nconst moment = require('moment');\r\nconst reactionSchema = require('./Reaction');\r\n\r\nconst ThoughtSchema = new Schema(\r\n  {\r\n    thoughtText: {\r\n      type: String,\r\n      required: true,\r\n      minlength: 1,\r\n      maxlength: 280,\r\n    },\r\n    createdAt: {\r\n      type: Date,\r\n      default: Date.now,\r\n      get: (createdAtVal) =>\r\n        moment(createdAtVal).format('MMM DD, YYYY [at] hh:mm a'),\r\n    },\r\n    username: {\r\n      type: String,\r\n      required: true,\r\n      trim: true,\r\n    },\r\n    // use reactionSchema to validate data for a reply\r\n    reactions: [reactionSchema],\r\n  },\r\n  {\r\n    toJSON: {\r\n      virtuals: true,\r\n      getters: true,\r\n    },\r\n    id: false,\r\n  }\r\n);\r\n\r\nThoughtSchema.virtual('reactionCount').get(function () {\r\n  return this.reactions.length;\r\n});\r\n\r\nThoughtSchema.pre('findOneAndDelete', async function (next) {\r\n  const thought = this;\r\n  // Remove all reactions on the thought being deleted\r\n  await Reaction.deleteMany({ thoughtId: thought._id });\r\n  next();\r\n});\r\n\r\nconst Thought = model('Thought', ThoughtSchema);\r\n\r\nmodule.exports = Thought;\r\n"]}